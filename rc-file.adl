# =====================================================
# General Parsers, not specific to Mediathek-Archives #
# =====================================================



# ---------------
# Parser "empty":
# ---------------
# empty means something like "after implicit get do NOP"
# the parser definition is emty and only for testing.
# This can make sense in checking if the implicit get works+
# (check if the start-url works at all).
# also can be used together with "-v" option to get all
# sorts of information without starting any download actions
# and without injvoking any other ecreen-filling parsers like "dump".
parsername "empty": ()
start
  dummy;
end


parsername "linkextract": ( )
start
  linkextract;
  print;
end


parsername "linkextract_xml": ( )
start
  linkextract_xml;
  print;
end


# html-deparse-dump
parsername "dump": ( )
start
  dump;
end


# show tags
# ---------
parsername "show_tags": ( )
start
  show_tags;
end


# show tags with complete html-path
# ---------------------------------
parsername "show_tags_full": ( )
start
  show_tags_fullpath;
end


# show URL and title
# ---------
parsername "pageinfo": ( )
start
  print_string("\n"); # blank line
  titleextract;
  print;
  print( "   ", $STARTURL, "\n" );
end


# ------------------------------------------
# only prints data part of the html, no tags
# acts like html-2-txt, but does not change
# tags by their text-aequivalent. So, html2txt
# would be overestimating it's functionality.
# ------------------------------------------
parsername "dumptext": ( )
start
  dump_data;
end


# this one is unmature stuff, experimental field.
parsername "videonames": ( )
start
  match( "(*.mp4)|(*.flv)|(*.swf)|(*.mpg)|(*.m4v)|(mp4:.*)|(rtmp.*)" );
  print;
end


# parser for testing cookies
# ----------------------------------------------------
# Some tests of cookies can be found here:
#   http://winware.org/de/cookietest.php
#
# Used testpage for setting/reflecting a cookie:
#   http://winware.org/de/cookietest.php?cookie=set
# ----------------------------------------------------
parsername "cookieecho": ( )
start
  print("COOKIES.RECEIVED: ", $COOKIES.RECEIVED );

  print("Preparing cookies for get");
  recall("COOKIES.RECEIVED");
  store("COOKIES.SEND");

  recall("STARTURL");
  print;
  get;

  print("COOKIES.SEND: ", $COOKIES.SEND );
  print("COOKIES.RECEIVED: ", $COOKIES.RECEIVED );


  print("Preparing cookies for second get");
  recall("COOKIES.RECEIVED");
  store("COOKIES.SEND");

  recall("STARTURL");
  print;
  get;

  print("COOKIES.SEND: ", $COOKIES.SEND );
  print("COOKIES.RECEIVED: ", $COOKIES.RECEIVED );
end






# ==============================================
# Parser-Definitions for the Mediathek-Parsers #
# ==============================================




# ---------------------------------
# ARD 
# ---------------------------------
# Example: http://www.ardmediathek.de/das-erste/polizeiruf-110/am-set-von-polizeiruf-110-interview-mit-charly-huebner?documentId=11177770
# =================================
parsername "ard_mediathek_get": ("http://www.ardmediathek.de", "http://mediathek.daserste.de")
start
  match( >>>(rtmpt{0,1}://[^\"]+).*?(mp4:[^\"]+)"<<< );
  store("match");
  iselectmatch(2, "hd");
  store("high");

  #show_type;
  #print;

  select(1); quote;  store("rtmp");
  recall("high");
  select(2); quote; store("mp4");

  # create filename
  # ---------------
  to_string;
  basename;
  #subst(>>>(["+?/%;&= ]+)|(%..)<<<, "_");
  subst(>>>\?.*?$<<<, ""); # remove the ?-paramater stuff from the filename !
  subst(>>>"<<<, "");      # remove double-quote, which may have survived until here
  store("filename");
  #print;

  # create new filename from folename and the title of the video
  # ------------------------------------------------------------
  recall("BASEDOC");
  match(>>><meta itemprop="name" content="([^\"]+)<<<);
  rowselect(0);
  select(1);

  subst(>>>(["+?/%;&= ]+)|(%..)<<<, "_"); # remove all that crap from the title
  subst(>>>"<<<, ""); # remove quotings
  store("title");

  paste( $title, "_", $filename );
  quote;
  store("filename");

  # Titel:   <meta itemprop="name" content="Verkauft und versklavt - Gott und die Welt"/>

  # "outfile.mp4" is bad; better use a name, derived from the URL 
  # --------------------------------------------------------------
  paste("rtmpdump --resume  -r ",  $rtmp, " -y ", $mp4, " -o ", $filename );
  print;
  system;

end



# ---------------------------------
# ARD / das erste
# ---------------------------------
# Example: http://www.ardmediathek.de/das-erste/satire-gipfel/die-sendung-vom-4-februar-2013?documentId=13300098
# =================================
parsername "ard_das-erste_get": ( "http://www.ardmediathek.de/das-erste/" )
start
  match( >>>(rtmp[^"]+)", "mp4:(.*mp4.*?for=(Web-.)&amp[^"]+)<<< );  # the inner group-match is col 3 -> iselectmatch
  show_match;

  # Quality selection
  # -----------------
  iselectmatch(3, "Web-M"); # match on third column and default to middle quality
  store("select"); # this is the selected quality and we need to save it for later

  # select the rtmp-part
  # --------------------
  select(1);
  store("rtmp");

  # select the mp4-part
  # -------------------
  recall("select"); 
  select(2);
  subst("\.mp4.*", ".mp4");
  store("mp4");

  paste( $rtmp, $mp4 );
  quote;
  store("URL");

  #print($URL); exitparse;


  # grab the title
  # --------------
  recall("BASEDOC");
  titleextract;
  subst("[[:^alnum:]]+", "_");  # non-alnum -> "_"
  store("title");

  # get the video
  # -------------
  paste("rtmpdump --resume  -r ",  $URL, " -o ", $title, ".mp4" );
  print;
  system;


end


# ---------------------------------
# ARD Tagesthemen
# ---------------------------------
# other possuble source (RSS/XML) would be:
# http://www.tagesschau.de/export/video-podcast/tagesthemen/
# ---------------------------------
parsername "ard_tagesthemen": ( "http://www.ardmediathek.de/das-erste/tagesthemen" )
start
  match( >>>http://(.*?).mp4<<< );
  rowselect(0);
  select(0);
  store("mp4url");
  basename;
  store("basename");
 
  paste(" wget -O tagesthemen_", $basename, " ", $mp4url );
  system;
end




# ---------------------------------
# ARTE-GUIDE
# ---------------------------------
# 1. Hauptseite ziehen
# 2. Titel extrahieren und sichern
# 3. Match auf arte_vp_url ( "ALL.json" )
# 4. get ALL.json
# 5. extrahiere Video-URL: http://artestrsmv.*?mp4 aus dem ALL.json
# 6. Download video-file
# ---------------------------------
# Example-URL: http://videos.arte.tv/de/videos/joe-strummer--7161356.html
# =================================
parsername "arte-guide": ( "http://www.arte.tv/guide/fr/", "http://www.arte.tv/guide/de/" )
start

  titleextract;
  subst("[[:^alnum:]]+", "_");  # non-alnum -> "_"
  store("title");
  recall("BASEDOC");

  #select the JSON-URL ( e.g. http://org-www.arte.tv/papi/tvguide/videos/stream/player/F/044035-000_PLUS7-F/ALL/ALL.json )
  # ------------------
  match( >>>arte_vp_url="(.*)"<<< );
  show_match;

  rowselect(0);
  select(1);

  makeurl;
  get;    # get file "ALL.json"

  store("ALL.json"); # store it, just in case

  # etract videofile-name
  # ---------------------
  match("http://artestrsmv.*?mp4");
  rowselect(0);
  select(0);

  makeurl;
  store("videourl");



  #get; # geht so nicht. bekommt rtsp:// angeboten... ?! -> debugging wäre sinnvoll

  paste(" wget -O ", $title, ".mp4 ", $videourl );
  print;
  system;

end



# ---------------------------------
# ARTE
# ---------------------------------
# 1. Hauptseite ziehen
# 2. Matche id_re = re.compile('class="vote .ajaxUrl:..?(/../do_delegate/videos/)([^,]+),view,ratingForm.html')
# 3. Xml-Url erzeugen aus: xmlurl = 'http://videos.arte.tv%s%s,view,strmVideoAsPlayerXml.xml' % (match.group(1), match.group(2))
#    wobei match.group(1) und match.group(2) die beiden Teilmatches (Group-Matches) aus dem match aus (Punk 1) sind
# 4. downloade die XML-Datei
# 5. Matche auf url_re = re.compile('<url quality="([^"]+)">([^<]+)<')
# 6. selektiere die / eine Qualitätsstufe und entnehme dort die RTMP-Url (2. Group)
# 7. Kreiere Download-String
# 8. Downloade Datei
# ---------------------------------
# Example-URL: http://videos.arte.tv/de/videos/joe-strummer--7161356.html
# =================================
parsername "arte_get": ( "http://videos.arte.tv" )
start
  match( >>>class="vote .ajaxUrl:..?(/../do_delegate/videos/)([^,]+),view,ratingForm.html<<< );
  show_match;

  rowselect(0);

  store("ajax");


  select(1); store("group_1");
  recall("ajax");
  select(2); store("group_2");

  paste("http://videos.arte.tv", $group_1, $group_2, ",view,strmVideoAsPlayerXml.xml");
  makeurl;
  get;

# quality is coded like this:
#<urls>
#<url quality="sd">rtmp://artestras.fcod.llnwd.net/a3903/o35/mp4:geo/videothek/ALL/arteprod/A7_SGT_ENC_02_045368-000-A_PG_MQ_DE?h=656b8b0ff570b6280be8acd0b47495bf</url>
#<url quality="hd">rtmp://artestras.fcod.llnwd.net/a3903/o35/mp4:geo/videothek/ALL/arteprod/A7_SGT_ENC_04_045368-000-A_PG_HQ_DE?h=1b67e74cf4313d1a3979fe670187146d</url>
#</urls>

  match(_*_<url quality="([^"]+)">([^<]+)<_*_);
  show_match;


  # QUALITY-SELECTION!!!
  # --------------------
  iselectmatch(1, "hd");

  print("selected quality:\n");
  print;

  select(2);
  store("rtmp");


  # create filename
  # ---------------
  recall("BASEDOC");
  titleextract;
  subst("[[:^alnum:]]+", "_");  # non-alnum -> "_"
  store("title");

  # download the video
  # ------------------
  paste("rtmpdump --resume  -r \"",  $rtmp, "\"  -o ", $title, ".mp4" );
  print;
  system;

end








# ---------------------------------
# NDR 
# ---------------------------------
# Example: http://www.ndr.de/fernsehen/sendungen/mein_nachmittag/videos/wochenserie361.html
# =================================
parsername "ndr_mediathek_get": ( "http://www.ndr.de", "http://www.ardmediathek.de/ndr-fernsehen/", "http://www.ardmediathek.de/das-erste/guenther-jauch/" )
start
  match( "http://.*?mp4" );
  show_match;
  iselectmatch(0, ".hi.mp4" );
  select(0);
  store("url");

  basename;
  store("origname");

  recall("BASEDOC");
  titleextract;
  subst("[[:^alnum:]]+", "_");  # non-alnum -> "_"
  store("title");
  print("Title: ", $title);

  # download the video
  # ------------------
  paste("wget -c ",  $url, " -O ", $title, $origname );
  print;
  system;
end


# ---------------------------------
# ARD / Nachtmagazin
# ---------------------------------
# Example: http://www.ardmediathek.de/das-erste/nachtmagazin/nachtmagazin?documentId=13244376
# =================================
parsername "ard_nachtmagazin": ( "http://www.ardmediathek.de/das-erste/nachtmagazin/", "http://www.ardmediathek.de/das-erste/brennpunkt/" )
start
  match( "http://.*?mp4" );
  show_match;

  # select quality
  # --------------
  iselectmatch(0, "webm.h264.mp4");
  store("url");

  # build filename
  # --------------
  to_string;
  basename;
  store("filename");
  paste("Nachtmagazin_", $filename);
  store("filename");

  # download the video
  # ------------------
  paste("wget -c ",  $url, " -O ", $filename );
  print;
  system;
end


# ---------------------------------
# ZDF 
# ---------------------------------
# (* Webpage -> ASX-Link -> ASX-Page -> MMS-Link *)
# ---------------------------------
# Example: http://www.zdf.de/ZDFmediathek/beitrag/video/1800812/Das-Adlon.-Eine-Familiensaga-%25281%2529?bc=sts;stt&flash=off
# =================================
parsername "zdf_mediathek_get": ( "http://www.zdf.de" )
start
  match( "http://.*?asx" );
  rowselect(0);
  select(0);

  # get the ASX-file (URL should be grabbed from last action... so this is a workaround here *)
  makeurl;
  get;
  print("ASX-file downloaded.\n");

  linkextract_xml;

  select(0);
  store("mms");

  # create filename
  to_string;
  basename;
  store("filename");

  # download the video
  # ------------------
  paste("mplayer -dumpstream  \"",  $mms, "\" -dumpfile ", $filename );
  print;
  system;

end

# Sendungstitel:
# http://www.zdf.de/ZDFmediathek/beitrag/video/1778740/Mars-Mega-Rover?flash=off
# <title>Mars Mega Rover - ZDFinfo - ZDFmediathek - ZDF Mediathek</title>
#
# </div>  
# <!-- EndeBreadcrumbNavigation --><!-- StartHeadlineDesBeitrags -->
# <h1 class="beitragHeadline">Mars Mega Rover</h1>
# <!-- EndeHeadlineDesBeitrags -->
# <img src="/ZDFmediathek/contentblob/1778740/timg485x273blob/7360575" title="Curiosity" alt="Mars Mega Rover"/>



# ----------------------------------------------------------------
# ---------------------------------
# ZDF 
# ---------------------------------
# Example: http://wstreaming.zdf.de/zdf/veryhigh/130106_teileins_fs_adl.asx
# =================================
parsername "zdf_mediathek_asx": ( "http://wstreaming.zdf.de")
start
  linkextract_xml;
  select(0);
  store("mms");

  # create filename
  to_string;
  basename;
  store("filename");

  paste("mplayer -dumpstream  \"",  $mms, "\" -dumpfile ", $filename );
  print;
  system;
end





# ---------------------------------
# WDR 
# ---------------------------------
# Example: http://www.wdr.de/mediathek/html/regional/2013/01/09/hier-und-heute.xml
# =================================
parsername "wdr_mediathek": ( "http://www.wdr.de" )
start
  match("(rtmp://.*?(web-.).mp4)");
  show_match;

  iselectmatch(2,".*?web-m.mp4");

  select(1); # use item with index 1 (rtmp-url)
  #show_type;

  to_string;
  store("rtmp");
  #show_type;

  basename;
  store("filename");
  #print;

  paste("rtmpdump --resume  -r \"",  $rtmp, "\"  -o ", $filename );
  print;
  system;
end

# ---------------------------------
# ARD/HR 
# ---------------------------------
# Example: http://www.ardmediathek.de/hr-fernsehen/alle-wetter/mikroblockheizkraftwerke?documentId=13068860
# =================================
parsername "ard__hr_wdr": ( "http://www.ardmediathek.de/hr-fernsehen/", "http://www.ardmediathek.de/wdr-fernsehen/hier-und-heute/", "http://www.ardmediathek.de/das-erste/anne-will/" )
start
  match( "http://.*mp4" );
print;
  rowselect(2);
  store("url");

  # make a better outfilename with title
  # ------------------------------------
  recall("BASEDOC");
  match(>>><meta itemprop="name" content="([^\"]+)<<<);

  rowselect(0);
  select(1);
  #subst("[! -]+", "_");
  subst("[[:^alnum:]]+", "_");  # non-alnum -> "_"
  store("title");

  paste($title, ".mp4");
  subst("_\.", ".");
  store("outfilename");


  # download the video
  # ------------------
  paste( "wget -c ",  $url, " -O ", $outfilename );
  print;
  system;
end


# ---------------------------------
# ARD/WDR
# ---------------------------------
# Example: http://www.ardmediathek.de/wdr-fernsehen/bericht-aus-bruessel/sendung-vom-30-01-2013?documentId=13242946
# =================================
parsername "ard_wdr": ( "http://www.ardmediathek.de/wdr-fernsehen/" )
start

  match("(rtmp://.*?.mp4)");
  #show_match;

  iselectmatch(1,".*?web-m.mp4");

  select(1); # use item with index 1 (rtmp-url)
  subst(>>>", "<<<, "/");
  #show_type;

  store("rtmp");

  basename;
  store("filename");
  #print;

  paste("rtmpdump --resume  -r \"",  $rtmp, "\"  -o ", $filename );
  print;
  system;

end


# ---------------------------------
# ARD/RBB
# ---------------------------------
# Example: http://www.ardmediathek.de/rbb-fernsehen/klartext/personal-als-sicherheitsrisiko?documentId=13243418
# =================================
parsername "ard_rbb_swr": ( "http://www.ardmediathek.de/rbb-fernsehen/", "http://www.ardmediathek.de/swr-fernsehen/" )
start
  match("(rtmp://.*?)\".*?\"(mp4:.*?mp4)");
  show_match;

  # select the right match, according to the wished quality
  # -------------------------------------------------------
  iselectmatch(2,".*.mp4");

  # get the rtmp-part from the selected match
  # -----------------------------------------
  store("selected_match");
  select(1); # use item with index 1 (rtmp-url)
  store("rtmp");

  # get the mp4-part from the selected match
  # -----------------------------------------
  recall("selected_match");
  select(2); # use item with index 2 (mp4-url)
  store("mp4");


  # get the basename as filename
  # ----------------------------
  basename;
  store("filename");

  paste("rtmpdump --resume  -r \"",  $rtmp, "\" -y \"", $mp4, "\"  -o ", $filename );
  print;
  system;

end






# ---------------------------------
# 3SAT
# ---------------------------------
# Example: http://www.3sat.de/mediathek/index.php?display=1&mode=play&obj=34110
# http://www.3sat.de/mediathek/index.php?display=1&mode=play&obj=34191
# =================================
parsername "3sat_mediathek_get": ( "http://www.3sat.de" )
start
  store("url");

  # look out for SMIL-file-url
  # --------------------------
  match( "\"(.*?smil.*?)\"" );
  rowselect(0);
  select(1);

  print;

  # get the SMIL-file
  # -----------------
  show_type;
  makeurl;
  get;


  store("smil_file");
  #print;

#<video dur="00:44:08" paramGroup="gl-vod-rtmp" src="mp4:3sat/12/12/121216_american_collapse_online_51k_p7v9.mp4" system-bitrate="62000">
#<param name="quality" value="low" />
#</video>
#<video dur="00:44:08" paramGroup="gl-vod-rtmp" src="mp4:3sat/12/12/121216_american_collapse_online_536k_p9v9.mp4" system-bitrate="700000">
#<param name="quality" value="high" />
#</video>
#<video dur="00:44:08" paramGroup="gl-vod-rtmp" src="mp4:3sat/12/12/121216_american_collapse_online_1596k_p13v9.mp4" system-bitrate="1700000">
#<param name="quality" value="veryhigh" />

# Beispiel: select VeryHigh quality
# ---------------------------------

  # match filename
  #match( >>>(mp4:.*?)"|(name="quality" value="(.*))"<<<);
  match( >>>(mp4:.*?)".*?\n.*?(name="quality" value="(.*))"<<<);
  show_match;

  # select quality here (default: high)
  # -------------------
  iselectmatch(3, "high");


  # select the mp4-filename
  # -----------------------
  select(1);
  store("mp4");
  subst("mp4:", "");
  store("mp4_simple");
  print;
  basename;
  store("outname");
  print;


  # find out the app-name (which is part of the download-url)
  # It's inside the SMIL-file
  # ---------------------------------------------------------
  recall("smil_file");
  match( >>>param name="app" value="(.*?)"<<<);
  show_match;

  # select the real appname-value now
  # ---------------------------------
  rowselect(0);
  select(1);
  print;
  store("app");

  # look up host-part from SMIL-file
  # --------------------------------
  recall("smil_file");
  match( >>>param name="host" value="(.*?)"<<<);
  show_match;
  rowselect(0);
  select(1);
  store("rtmp_hostname");

  # get title and prepare it for prepending to "outname"
  # ----------------------------------------------------
  recall("BASEDOC"); titleextract;
  subst("[[:^alnum:]]+", "_");  # non-alnum -> "_"
  store("title");

  paste(" rtmpdump --resume -r rtmp://", $rtmp_hostname, "/", $app, "/", $mp4_simple, " -o ", $title, "_", $outname );

  print("_________________\n");
  print;

  system;

end



# -----------------------------------------------------------
# TED
# -----------------------------------------------------------
# Example: http://www.ted.com/talks/cesar_kuriyama_one_second_every_day.html
# -----------------------------------------------------------
# simple parser, just picks the easiesed way,
# with no quality selection so far.
# Just to have something handy right now.
# ===========================================================
parsername "ted": ( "http://www.ted.com/talks/" )
start
  linkextract;
  grep("mp4");
  makeurl;

  store("url");
  paste("wget -c -np ", $url);
  print;
  system;
end




# -----------------------------------------------------------
# ARD DW-TV
# -----------------------------------------------------------
# Example: http://www.ardmediathek.de/dw-tv/made-in-germany-das-wirtschaftsmagazin?documentId=13387934
# -----------------------------------------------------------
# 
# ===========================================================
parsername "ard_dw-tv": ( "http://www.ardmediathek.de/dw-tv/", "http://www.first.in-berlin.de/" )
start

  match( "http://tv-download.dw.de.*mp4" );
  print;
  show_match;
  rowselect(0);
  makeurl;
  print;
  store("url");

  basename;
  store("filename");

  # create title
  # -------------
  recall("BASEDOC");
  titleextract;
  subst("[[:^alnum:]]+", "_");  # non-alnum -> "_"
  store("title");

  print("URL: ", $url, "\nTitle: ", $title, "\nFilename: ", $filename);

  paste("wget -c -np ", $url, " -O ", $title, "_", $filename );
  print;
  system;
end




# ---------------------------------
# wdr.de/tv
# ---------------------------------
# Example: http://www.wdr.de/tv/westart/sonntag/sendungsbeitraege/2013/0602/index.jsp
# =>: rtmp://gffstream.fcod.llnwd.net/a792/e2/CMS2010/mdb/15/153162/westarttalkdahabenwirwasangerichtetfoerderntafelndiearmut_1512942.mp4
# =================================
parsername "wdr_de_tv_westart": ( "http://www.wdr.de/tv/westart/sonntag/sendungsbeitraege" )
start
  match( "(rtmp:.*?mp4)" );
  rowselect(0);
  select(0);
  store("rtmp_url");
  basename;
  store("filename");
  print;
  paste("rtmpdump --resume  -r ",  $rtmp_url, " -o ", $filename );
  print;
end




#######################################################
###      N   O   T       T   E   S   T   E   D      ###
#######################################################
# -----------------------------------------------------------
# YOUTUBE
# -----------------------------------------------------------
# Example: http://www.youtube.com/watch?v=vr1yzc_kI1E     MjamMjam :-)
# -----------------------------------------------------------
# 
# ===========================================================
parsername "youtube": ( "http://www.youtube.com/watch" )
start

  #linkextract;
  #print;
  #print("----------------------------");

  recall("BASEDOC");
  show_tags;



end

# ---------------------------------
# Vimeo
# ---------------------------------
# Example: http://vimeo.com/58385453
# ---------------------------------
# ---------------------------------
# Description of a way to get it:
# http://www.jwz.org/blog/2012/06/vimeo-download-escalation/
# =================================
parsername "vimeo": ( "http://vimeo.com/" )
start
  match("<title>(.*?)</title>");
  rowselect(0); select(1);
  subst("[[:^alnum:]]+", "_");  # non-alnum -> "_"
  store("title");
  print("Title: ", $title, "\n" );

  # extracting the signature string
  # -------------------------------
  recall("BASEDOC");
  match(>>>signature":"([^"]+)"<<<);
  rowselect(0); select(1); # select the raw signature string
  store("signature");

  # extracting the timestamp
  # ------------------------
  recall("BASEDOC");
  match(>>>timestamp":([^,]+),<<<);
  rowselect(0); select(1); # select the raw signature string
  store("timestamp");

  print("Signature: ", $signature, "\nTimestamp: ", $timestamp);

  # extract clip-name
  # -----------------
  recall("STARTURL");
  to_string;
  basename;
  store("clip");
  print;

  # create cookie file
  # ------------------
  paste("cat > cookie.txt <<EOF\nhtml_player=1; clips=", $clip, "\nEOF\n");
  print;
  system;

  # get the cookies from first page
  # -------------------------------
  paste(>>>wget --load-cookie=cookie.txt --save-cookie=xxx http://vimeo.com/<<<, $clip );
  print;
  system;

  # create the vimeo-url
  # --------------------
  paste(>>>"http://player.vimeo.com/play_redirect?quality=hd&codecs=h264&clip_id=<<<,
        $clip,
        >>>&time=<<<, $timestamp,
        >>>&sig=<<<, $signature,
        >>>&type=html5_desktop_local"<<< );
  store("vimeourl");
  print;
  paste("wget ", "--load-cookie=xxx ", $vimeourl, " -O ", $title);
  system;

  #paste(>>> wget --load-cookie=xxx "http://player.vimeo.com/play_redirect?quality=hd&codecs=h264&clip_id=$clip&time=$timestamp&sig=$signature&type=html5_desktop_local"<<< );
  print;
  #paste( wget --load-cookie=xxx "http://player.vimeo.com/play_redirect?quality=hd&codecs=h264&clip_id=$clip&time=$timestamp&sig=$signature&type=html5_desktop_local" )

end

# (*
#   Pro-Sieben:
# 
#   Im Gulli-Board konnte ich folgenden Trick finden
# 
#   http://www.prosieben.de/dynamic/h264/h264map/?ClipID=<...>
#   <...> durch die ID des Videos ersetzen
# 
#   Für dieses Video (www.prosieben.de/tv/galileo/videos/clip/288557-asperger-informatik-1.3122799) also
#   http://www.prosieben.de/dynamic/h264/h264map/?ClipID=288557
# 
#   bei Aufruf erfolgt eine Weiterleitung zu
#   http://video.sevenoneintermedia.de/clips/geo_d_at_ch/mp4-840 /288000/288557-840-553674.mp4?s=1&t=20120331
# *)
# ---------------------------------
# PRO7
# ---------------------------------
# Example: ...
# =================================
parsername "pro7_mediathek_get": ( "http://www.prosieben.de" )
start
  store("url");
  match( "(\".*?mp4.*?\")" );
  show_match;

  # und wie nun weiter?

end





# ---------------------------------
# DCTP
# ---------------------------------
# Example: 
# =================================
parsername "dctp_mediathek_get": ( "http://www.dctp.tv" )
start
  match( "(mp4:.*\")" );
  print;
end


# ---------------------------------
# ORF
# ---------------------------------
# Example: 
# http://tvthek.orf.at/topics/Wehrpflicht%20oder%20Berufsheer/5219477-Zeit-im-Bild/segments/5219513-Zivildienst-fuer-Frauen
# =================================
parsername "orf_mediathek_get": ( "http://tvthek.orf.at" )
start
  #linkextract;
  #print;
  match( "(mp4:.*?mp4)|(rtmp.*?\")" );
  show_match;
end




# working, but too simple, you could use wget instead ;-) It's just for testing purposes
parsername "save": ( )
start
  save;
end


##################################################################################
#### BELOW IS OLD STUFF, some infos that might be helpful for parser-devel.
##################################################################################

# 
# (* Sender-spezifische URL-Grabber *)
# (* ============================== *)
# let zdf_mediathek_get_mmsurl    = web_asx_mms_get
# let orf_mediathek_get_mmsurl    = web_asx_mms_get
# --------------------------------------------------------------------------------------
#
# (* http://www.ndr.de/fernsehen/sendungen/45_min/videos/minuten393.html
# 
# <div id="flash_player_audio_gallery_minuten393">
# F&uuml;r diesen Inhalt muss JavaScript aktiviert und die aktuelle Version vom Adobe Flash Player installiert sein. Sie k&ouml;nnen den Player hier runterladen. <a href="http://get.adobe.com/de/flashplayer/" title="Adobe Flash Player runterladen">http://get.adobe.com/de/flashplayer/</a>
# <div class="filename invisible" data-value="http://media.ndr.de/progressive/2011/1205/TV-20111205-2327-1201.hq.mp4"></div>
# <div class="imgname invisible" data-value="/fernsehen/sendungen/45_min/hintergrund/paketsklaven133_v-contentgross.jpg"></div>
# </div>
# *)
# 
# ============================================================================
# http://www.chip.de/artikel/Mediathek-Download-ARD-ZDF-Sat.1-Pro7-BR-ORF-MTV-Co._47670328.html
# ============================================================================
# 
# www.ardmediathek.de
# www.rtl-now.de
# www.rtl2.de
# www.prosieben.de/video
# www.sat1.de/video
# www.kabeleins.de/videos
# mediencenter.n24.de
# http://mediathek-video.br.de.
# www.ndr.de
# ORF:  http://www.chip.de/artikel/ORF-Mediathek-Download_47276441.html
# www.videoportal.sf.tv
# http://www.3sat.de/mediathek
# www.viva.tv/vivavideos
# www.mdr.de/mediathek
# www.swrmediathek.de
# 
