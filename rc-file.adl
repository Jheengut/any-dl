# Parser-Definitions for the Mediathek-Parsers
# --------------------------------------------

parsername "linkextract": ( "" )
start
  linkextract;
  print;
end


# Beispiel: http://www.ardmediathek.de/das-erste/polizeiruf-110/am-set-von-polizeiruf-110-interview-mit-charly-huebner?documentId=11177770
# =================================
# ARD - complete download works :-)
# =================================
parsername "ard_mediathek_get": ("http://www.ardmediathek.de", "http://mediathek.daserste.de")
start

  match( >>>(rtmpt{0,1}://[^\"]+).*?(mp4:[^\"]+)\"<<< );
  store("match");
  rowselect(2);
  store("high");

  show_type;
  print;

  select(1); store("rtmp");
  recall("high");
  select(2); store("mp4");

  # "outfile.mp4" is bad; better use a name, derived from the URL 
  # --------------------------------------------------------------
  paste("rtmpdump --resume  -r \"",  $rtmp, "\" -y \"", $mp4, "\"  -o outfile.mp4" );
  print;
  system;

end



# ARTE
#
# id_re = re.compile('class="vote .ajaxUrl:..?(/../do_delegate/videos/)([^,]+),view,ratingForm.html')
# url_re = re.compile('<url quality="([^"]+)">([^<]+)<')
# retry_re = re.compile('Download may be incomplete \([^)]+\), try resuming')
# packerr_re = re.compile('ERROR: ReadPacket, failed to read RTMP packet header')
# restricted_re = re.compile('carton_23h_..\.mp4')
# fallback_re = re.compile('fallback_..\.mp4')
#
# 1. Hauptseite ziehen
# 2. Matche id_re = re.compile('class="vote .ajaxUrl:..?(/../do_delegate/videos/)([^,]+),view,ratingForm.html')
# 3. Xml-Url erzeugen aus: xmlurl = 'http://videos.arte.tv%s%s,view,strmVideoAsPlayerXml.xml' % (match.group(1), match.group(2))
#    wobei match.group(1) und match.group(2) die beiden Teilmatches (Group-Matches) aus dem match aus (Punk 1) sind
# 4. downloade die XML-Datei
# 5. Matche auf url_re = re.compile('<url quality="([^"]+)">([^<]+)<')
# 6. selektiere die / eine Qualitätsstufe und entnehme dort die RTMP-Url (2. Group)
# 7. Kreiere Download-String
# 8. Downloade Datei


# Beispiel-URL: http://videos.arte.tv/de/videos/joe-strummer--7161356.html

parsername "arte_get": ( "http://videos.arte.tv" )
start
  match( >>>class="vote .ajaxUrl:..?(/../do_delegate/videos/)([^,]+),view,ratingForm.html<<< );
  show_match;

  rowselect(0);

  store("ajax");

  select(1); store("group_1");
  recall("ajax");
  select(2); store("group_2");

  paste("http://videos.arte.tv", $group_1, $group_2, ",view,strmVideoAsPlayerXml.xml");
  print;
  store("url");
  makeurl($url);
  get;
  match(_*_<url quality="([^"]+)">([^<]+)<_*_);
  show_type;

#<urls>
#<url quality="sd">rtmp://artestras.fcod.llnwd.net/a3903/o35/mp4:geo/videothek/ALL/arteprod/A7_SGT_ENC_02_045368-000-A_PG_MQ_DE?h=656b8b0ff570b6280be8acd0b47495bf</url>
#<url quality="hd">rtmp://artestras.fcod.llnwd.net/a3903/o35/mp4:geo/videothek/ALL/arteprod/A7_SGT_ENC_04_045368-000-A_PG_HQ_DE?h=1b67e74cf4313d1a3979fe670187146d</url>
#</urls>

  show_match;

  rowselect(1);
  select(2);
  store("rtmp");

  print;

  paste("rtmpdump --resume  -r \"",  $rtmp, "\"  -o outfile.mp4" );
  system;

end





parsername "ndr_mediathek_get": ( "http://www.ndr.de" )
start
  match( "http://.*?mp4" );
  print;
end


# http://www.zdf.de/ZDFmediathek/beitrag/video/1800218/Robin-Hood---Rebell-der-Herzen?bc=sts;stt&flash=off
parsername "zdf_mediathek_get": ( "http://www.zdf.de" )
start
  match( "http://.*?asx" );
  print;

  # get the ASX-file (URL should be grabbed from last action... so this is a workaround here *)
  get("http://wstreaming.zdf.de/zdf/veryhigh/121229_robin_hood_doku_dok.asx");
  linkextract_xml;
  print;

# mplayer -dumpstream mms://example.com/Globalplayers/GP_14.wmv -dumpfile ./download/test.wmv

end


parsername "dctp_mediathek_get": ( "http://www.dctp.tv/" )
start
  match( "(mp4:.*\")" );
  print;
end


# http://tvthek.orf.at/topics/Asyl-Protest/5183121-heute-oesterreich/segments/5183161-Protest-der-Asylwerber
parsername "orf_mediathek_get": ( "http://tvthek.orf.at" )
start
  linkextract;
  print;
  #match( "(mp4:.*\")" );
  #print;
end



##################################################################################
#### BELOW IS OLD (directly coded) STUFF, JUST AS REFERENCE FOR FUTURE PARSERS ###
##################################################################################






# (* Webpage -> ASX-Link -> ASX-Page -> MMS-Link *)
# (* ------------------------------------------- *)
# let web_asx_mms_get url =
#   let suffix = ".asx" in
# 
#   (* get main-page via initial URL *)
#   (* ----------------------------- *)
#   let doc = get_document url ["Could not retrieve the url "; url; "\n" ] Mainurl_error in
# 
#   (* extract the ASX-file-URL *)
#   (* ------------------------ *)
#   let asx_matcher str = Filename.check_suffix str suffix in (* matcht hier ".asx" file-suffix, könnte aber auch pcre-match sein... *)
#   let asx_urls = get_href_from_webdoc_and_match doc ( fun str -> asx_matcher str ) in
# 
#   (* REBASE: prepend the baseurl if necessary *)
#   let asx_urls = List.map ( fun asxurl -> prepend_baseurl_if_necessary url asxurl ) asx_urls in
# 
# 
#   let all_hrefs = ref [] in
#   List.iter ( fun asx_url ->
#                               let asx_url = List.hd asx_urls in  (* select just the first one (easiest criterium) *)
# 
#                               (* get the ASX-file via ASX-URL *)
#                               (* ---------------------------- *)
#                               let xml_doc = get_document  asx_url  ["Could not retrieve the "; suffix; "-document via url "; asx_url; "\n"] Not_found in
# 
#                               (* extract the real URLs of the streams *)
#                               (* ------------------------------------ *)
#                               let xml_as_xml = Parsers.Xmlparse.parse_string xml_doc in
#                               let href_list  = Parsers.xml_get_href xml_as_xml in
#                               all_hrefs := List.append href_list !all_hrefs
#             ) asx_urls;
#   if List.length asx_urls = 0 then raise Not_found;
#   !all_hrefs
# 
# 
# 
# 
# (*
#   Pro-Sieben:
# 
# 
#   Im Gulli-Board konnte ich folgenden Trick finden
# 
#   http://www.prosieben.de/dynamic/h264/h264map/?ClipID=<...>
#   <...> durch die ID des Videos ersetzen
# 
#   Für dieses Video (www.prosieben.de/tv/galileo/videos/clip/288557-asperger-informatik-1.3122799) also
#   http://www.prosieben.de/dynamic/h264/h264map/?ClipID=288557
# 
#   bei Aufruf erfolgt eine Weiterleitung zu
# 
#   http://video.sevenoneintermedia.de/clips/geo_d_at_ch/mp4-840 /288000/288557-840-553674.mp4?s=1&t=20120331
# 
#   werde mich bei Gelegenheit noch vorstellen
# 
#   [Aktualisiert am: Sa, 31 März 2012 22:50]
# *)
# 
# (*
#  WDR Monitor:
# 
#    <a title="Video: Flashplayer ab Version 8.0 erforderlich" rel="base#/tv/monitor/codebase/video/" href="http://www.wdr.de/themen/global/flashplayer/fscreen.jhtml?dslSrc=rtmp://gffstream.fcod.llnwd.net/a792/e2/mediendb/monitor08/video/2012/0426/120426_monitor_web-l.mp4&amp"
# *)
# 
# let _3sat_mediathek_get = ()
# (*
# 1. suche hauptseite
# 2. get &mode=play - Seite
# 3. get smil-Datei
# 4. ...
# 
# 120308_japan_scobel.smil
# *)
# 
# (*
#  Beispiel: "Just Ballet"
#    http://www.3sat.de/mediathek/?display=1&mode=play&obj=30650
# 
# enthält:
#    (...)
#    playerBottomFlashvars.mediaURL = "http://fstreaming.zdf.de/3sat/veryhigh/120427_justballet_ganzesendung1neu_musik.smil";
#    (...)
# 
# 
# *)
# 
# 
# (* Sender-spezifische URL-Grabber *)
# (* ============================== *)
# let zdf_mediathek_get_mmsurl    = web_asx_mms_get
# let orf_mediathek_get_mmsurl    = web_asx_mms_get
# let arte_mediathek_get_rtmp_url = arte_get
# let ard_mediathek_get           = ard_mediathek_get_rtmp_mp4_url_version_4
# let ndr_mediathek_get           = ndr_mediathek_get
# 
# 
# (* Webpage -> ASX-Link -> ASX-Page -> MMS-Link *)
# (* ------------------------------------------- *)
# let web_asx_mms_get url =
#   let suffix = ".asx" in
# 
#   (* get main-page via initial URL *)
#   (* ----------------------------- *)
#   let doc = get_document url ["Could not retrieve the url "; url; "\n" ] Mainurl_error in
# 
#   (* extract the ASX-file-URL *)
#   (* ------------------------ *)
#   let asx_matcher str = Filename.check_suffix str suffix in (* matcht hier ".asx" file-suffix, könnte aber auch pcre-match sein... *)
#   let asx_urls = get_href_from_webdoc_and_match doc ( fun str -> asx_matcher str ) in
# 
#   (* REBASE: prepend the baseurl if necessary *)
#   let asx_urls = List.map ( fun asxurl -> prepend_baseurl_if_necessary url asxurl ) asx_urls in
# 
# 
#   let all_hrefs = ref [] in
#   List.iter ( fun asx_url ->
#                               let asx_url = List.hd asx_urls in  (* select just the first one (easiest criterium) *)
# 
#                               (* get the ASX-file via ASX-URL *)
#                               (* ---------------------------- *)
#                               let xml_doc = get_document  asx_url  ["Could not retrieve the "; suffix; "-document via url "; asx_url; "\n"] Not_found in
# 
#                               (* extract the real URLs of the streams *)
#                               (* ------------------------------------ *)
#                               let xml_as_xml = Parsers.Xmlparse.parse_string xml_doc in
#                               let href_list  = Parsers.xml_get_href xml_as_xml in
#                               all_hrefs := List.append href_list !all_hrefs
#             ) asx_urls;
#   if List.length asx_urls = 0 then raise Not_found;
#   !all_hrefs
# 
# 
# 
# 
# let arte_get  url =
#   (* hier geht es los mit dem Download des Haupt-Dokumentes von der Mediathek *)
# 
#   (* GET *)
#   (* --- *)
#   let doc = get_document url ["Could not retrieve the url "; url; "\n" ] Mainurl_error in
#   (* EXTRACT *)
#   (* ------- *)
#   (* the URL-regexps, needed for handling ARTE *)
# 
#   let arte_xmlurl_re    = Pcre.regexp "ajaxUrl:.?(/../do_delegate/videos/)([^,]+),view,ratingForm.html" in
#   (* extracting the stuff *)
#   let xml_match_opt   = Parsers.if_match_give_groups  doc  arte_xmlurl_re in
#   let xml_submatch    = extract_some_with_exit_if_none  xml_match_opt  ["xml_submatch"] Could_not_extract_ARTE_Ajax_url in
#   flush stdout;
# 
#   let xml_url         = Printf.sprintf "http://videos.arte.tv%s%s,view,asPlayerXml.xml" xml_submatch.(1) xml_submatch.(2) in
# 
# 
#   (* GET *)
#   (* --- *)
#   let xml_doc = get_document xml_url [ "Could not retrieve ARTE xml-file" ] Could_not_get_ARTE_xml in
# 
#   (* EXTRACT *)
#   (* ------- *)
#   let arte_video_url_re = Pcre.regexp "<url quality=\"([^\"]+)\">([^<]+)<"                                in
#   let urls_array_opt = Parsers.if_match_give_group_of_groups xml_doc arte_video_url_re in
#   let urls_array     = extract_some_with_exit_if_none urls_array_opt ["urls_array_opt: error"] Not_found in
# 
#   let res = ref [] in
#   Array.iter ( fun arr -> res := arr.(1) :: arr.(2) :: !res ) urls_array;
# 
#   !res
# 
# 
# (* für ARD
# rtmpdump -y mp4:ard/mediendb/weltweit/video/2012/0228/120228_weltweit_web-m.mp4 -r rtmp://gffstream.fcod.llnwd.net/a792/e2/   -o out_l.flv
# 
# Das funktioniert auch:
# 
# rtmpdump -r rtmp://gffstream.fcod.llnwd.net/a792/e2/mp4:ard/mediendb/weltweit/video/2012/0228/120228_weltweit_web-m.mp4   -o out_l.flv
# *)
# 
# let ard_mediathek_get_rtmp_mp4_url  url =
# 
#   (* hier geht es los mit dem Download des Haupt-Dokumentes von der Mediathek *)
#   (* GET *)
#   (* --- *)
#   let doc = get_document url ["Could not retrieve the url "; url; "\n" ] Mainurl_error in
# 
#   (* EXTRACT *)
#   (* ------- *)
# (*
#   let mp4_urls_opt = Parsers.if_match_give_group_of_groups_2  doc (Pcre.regexp "http://[^\"]+?mp4\"") in
#   let mp4_urls     = extract_some_with_exit_if_none mp4_urls_opt [] ARD_Mp4_url_extraction_error in
# *)
# 
#   let rtmp_urls_opt = Parsers.if_match_give_group_of_groups_2  doc (Pcre.regexp "rtmpt{0,1}://[^\"]+") in
#   let rtmp_urls     = extract_some_with_exit_if_none rtmp_urls_opt [] ARD_Rtmp_url_extraction_error in
#   (*
#   *)
# 
#   let mp4_urls_opt = Parsers.if_match_give_group_of_groups_2  doc (Pcre.regexp "mp4:[^\"]+") in
#   let mp4_urls     = extract_some_with_exit_if_none mp4_urls_opt [] ARD_mp4_url_extraction_error in
#   (*
#   *)
# 
#   (* zipping *)
#   let links = List.map2 ( fun rtmp_arr mp4_arr -> rtmp_arr.(0) ^ "   " ^ mp4_arr.(0)  )  rtmp_urls mp4_urls in
#   (*
#   let links = List.map ( fun mp4_arr ->  mp4_arr.(0)  )  mp4_urls in
#   *)
# 
#   links
# 
# 
# 
# let ard_mediathek_get_rtmp_mp4_url_version_2  url =
#   (* hier geht es los mit dem Download des Haupt-Dokumentes von der Mediathek *)
#   (* GET *)
#   (* --- *)
#   let doc = get_document url ["Could not retrieve the url "; url; "\n" ] Mainurl_error in
# 
#   (* EXTRACT *)
#   (* ------- *)
#   let mp4_urls_opt = Parsers.if_match_give_group_of_groups_2  doc (Pcre.regexp "http://[^\"]+?mp4\"") in
#   let mp4_urls     = extract_some_with_exit_if_none mp4_urls_opt [] ARD_Mp4_url_extraction_error in
# 
#   let links = List.map ( fun mp4_arr ->  mp4_arr.(0)  )  mp4_urls in
# 
#   links
# 
# 
# 
# let ard_mediathek_get_rtmp_mp4_url_version_3  url =
#   (* hier geht es los mit dem Download des Haupt-Dokumentes von der Mediathek *)
#   (* GET *)
#   (* --- *)
#   let doc = get_document url ["Could not retrieve the url "; url; "\n" ] Mainurl_error in
# 
#   (* EXTRACT *)
#   (* ------- *)
#   let mp4_urls_opt = Parsers.if_match_give_group_of_groups_2  doc (Pcre.regexp "(rtmpt{0,1}://[^\"])(.*?)(mp4:[^\"]+)\"") in
#   let mp4_urls     = extract_some_with_exit_if_none mp4_urls_opt [] ARD_Mp4_url_extraction_error in
# 
#   let links = List.map ( fun mp4_arr ->  mp4_arr.(0)  )  mp4_urls in
# 
#   links
# 
# 
# 
# let ard_mediathek_get_rtmp_mp4_url_version_4 url =
#   Printf.printf "NEU (probeweise Funktion fuer ARD) !!! url=%s\n" url;
#   let commandlist = [ Get_url(url, "-");
#                       Match( "(rtmpt{0,1}://[^\"]+).*?(mp4:[^\"]+)\"" );
#                       (*
#                       Select( Selector.select_first_match );
#                       *)
#                       Print_match;
#                       Dummy
#                     ]
#   in
#   evaluate_command_list commandlist;
#   [""]
# 
# 
# 
# 
# 
# 
# (* http://www.ndr.de/fernsehen/sendungen/45_min/videos/minuten393.html
# 
# <div id="flash_player_audio_gallery_minuten393">
# F&uuml;r diesen Inhalt muss JavaScript aktiviert und die aktuelle Version vom Adobe Flash Player installiert sein. Sie k&ouml;nnen den Player hier runterladen. <a href="http://get.adobe.com/de/flashplayer/" title="Adobe Flash Player runterladen">http://get.adobe.com/de/flashplayer/</a>
# <div class="filename invisible" data-value="http://media.ndr.de/progressive/2011/1205/TV-20111205-2327-1201.hq.mp4"></div>
# <div class="imgname invisible" data-value="/fernsehen/sendungen/45_min/hintergrund/paketsklaven133_v-contentgross.jpg"></div>
# </div>
# *)
# 
# 
# let ndr_mediathek_get  url =
#   (* hier geht es los mit dem Download des Haupt-Dokumentes von der Mediathek *)
# 
#   (* GET *)
#   (* --- *)
#   let doc = get_document url ["Could not retrieve the url "; url; "\n" ] Mainurl_error in
# 
#   (* mp4-url extrahieren *)
#   let mp4_urls_opt = Parsers.if_match_give_group_of_groups_2  doc (Pcre.regexp "http://.*?mp4") in
#   let mp4_urls     = extract_some_with_exit_if_none mp4_urls_opt [] NDR_url_extraction_error in
# 
#   let links = List.map ( fun mp4_arr -> mp4_arr.(0)  )  mp4_urls in
# 
#   links
# 
# 
# 
# (* W D R *)
# (* ===== *)
# 
# (* WDR:
# Stringmatch auf:
#   rtmp://gffstream.fcod.llnwd.net/a792/e2/mediendb/markt/video/2012/0227/120227_markt_web-m.mp4&amp;overlay
# 
# WDR:
# 
# http://www.wdr.de/tv/quarks/sendungsbeitraege/2009/1222/003_arena_mannfrau.jsp?startMedium=122037&startPicture=/tv/fsstd-technik/codebase/img/default_startbild.jpg&dslSrc=rtmp://gffstream.fcod.llnwd.net/a792/e2/tv/quarks/091229_das_eyetracking_experiment_big.flv&overlayPic=/tv/quarks/codebase/img/overlay_video.png&offset=0&red=fsstd-tv%2Fquarks&base=/tv/quarks/codebase/video/&isdnSrc=rtmp://gffstream.fcod.llnwd.net/a792/e2/tv/quarks/091229_das_eyetracking_experiment_small.flv
# 
# Stringmatch auf:
# dslSrc=rtmp://gffstream.fcod.llnwd.net/a792/e2/tv/quarks/091229_das_eyetracking_experiment_big.flv&
# *)
# let wdr_mediathek_get_rtmp_mp4_url  url =
#   let commandlist = [ Get_url(url, "-");
#                       Match( "(rtmpt{0,1}://[^\"]+).*?(mp4:[^\"]+)\"" );
#                       Select( Selector.select_first_match );
#                       Print_match;
#                       Dummy
#                     ]
#   in
#   evaluate_command_list commandlist;
#   [""]
# 
# 
