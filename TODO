ENHANCEMENT:
============




BUGs:
=====

 - the interactive loop for menue-item selection needs to catch excceptions for failing int_of_string !!

 - to-string: incomplete

 - interactive selection menue: strangely, when just typing enter problems occur.
   Non-match case occurs.
   Must be checked, if there are not-correctly caught exceptions at the input part,
   or if possibly giving back index instead of selection string would make
   more sense. (possibly using index might makse sense, but can at some other
   parts of the program become a bit more effort.

   (...hhmmhhh the function tested separately, does work! )


 - using linkextract on "file:///"-urls does not work.

 - 3sat-Parser needs to be checked again. (See comments in rc-file, regarding Year / Month in URL)


BETTER STRUCTURE, CLEANER CODE:
===============================

 - URL-analysis in network.ml: wouldn#t it be better in parsers.ml?
 - maybe remove print_string(), because print() does the same now.
 - dump is rather a deparse; dump_data is dump-like or deparse-like too;
   possibly better names should be used here

 - in traversing HTML, possibly using a function, that gives back
   contents of current document, and of the head of the subdocs.
   Then (as recursion/fixpoint?) making the recursion complete??


FEATUREs:
=========


 - if/then/else?  try/catch?

 - possibly a true stack ( push, pop, dup, exch, ...) might make sense,
   enhancing the one-val-stack concept.


 - new built-in needed:  storematch("MyName"); # stores match.-array under   MyName.(col).(row)
 - new command: astore("NAME");  (autostore() -> store current value like matrix -> NAME.(x).(y) or something like that
 - syntacttic sugar: access to Array.items via  Dot-notation... eg.  $STACK.0, $STACK.1, $STACK.2 and so on.

 - !!!! XML-deparse -> get values from XML via name :-)


 - maybe add a more sophisticated program invocation (fork/exec or popen) ?

 - automatic working parser detection:
     try available parsers on an url, to check if one will work fotr that url


 - automatic lookup for rc-file also in other places (/etc/FooBar or something like that?) ???

 - matches and assignments -> each match-group one varname... like   (url,vidname,foobar) = match("^(.*)xyz(lala).*?(foobar)")

 - other syntax/grammar:
     - parser-Definitions only what to do, URLs not (or not necessarily?) at parser-definition.
     - command for attaching parsers to URLs or vice versa.
       something like:     attach parser "ard_mediathek_get" to ("http://...", "http://"...")
                 or        attach_urls "ard_mediathek_get" ("http://...", "http://"...")

 - call/use command, to call a different parser? ==>   parsername "parsefoobar": ( "url" ) begin call "ard_mediathek_get" end
   This way, not only an URL can be added, but also a name, or a distinct parser that just calls another parser.
   Not checked so far, how much effort for implementing this would be.
   But it looks reasonable to invest that effort for this feature.


 - possibly switch to ulex instead of ocamllex:
     http://alain.frisch.fr/soft.html#ulex
     http://caml.inria.fr/pub/ml-archives/caml-list/2006/04/6d31ef03a5a1f9a182a9ed2422d266a4.en.html
    ... but ocamlnet uses ulex internally? I could just use ocamlnet for reading/parsing files maybe?


 - would it make sense to allow get also to read the streams?
   Or should there be some other special commadn for it?
   like "get_stream"?
   (but how to achieve this? by using fork/exec to the tools used via system() at the moment?
   Or using stream-reading libraries for this? Are there any such libs and/or OCaml bindings?)

 - Logfile for sucessful and failed downloads

 - Testsuite would help a lot (example where helpful: linkextract problem in  commit c7f3c1ec98d9c3e88d47c93637a50879c0711d05 )
     - tesing sites as qell as testing parsers would be needed.


QUESTIONS:
==========

 - Parsername as predefined named Variable also?  ( $PARSERNAME ?? ) 

 - how detailed/verbose or how non-verbose should the commands be?
   e.g.  should print; print onl ythe url or url and referrer?
   Should there be more specific commands?
   Or should print get parameters?
   Or should there be something like
      print with referrer;

 - Implementing macros or not?
